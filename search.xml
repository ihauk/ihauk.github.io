<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>centos安装teamviewer概述</title>
      <link href="/2019/08/17/centos%20server%20%E5%AE%89%E8%A3%85%20teamviewer%20%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2/"/>
      <url>/2019/08/17/centos%20server%20%E5%AE%89%E8%A3%85%20teamviewer%20%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="历史版本安装连接"><a href="#历史版本安装连接" class="headerlink" title="历史版本安装连接"></a>历史版本安装连接</h3><p><a href="https://community.teamviewer.com/t5/TeamViewer-Knowledge-Base-ZH/%E6%88%91%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%93%AA%E9%87%8C%E4%B8%8B%E8%BD%BD-TeamViewer-%E6%97%A7%E7%89%88%E6%9C%AC/ta-p/33695" target="_blank" rel="noopener">https://community.teamviewer.com/t5/TeamViewer-Knowledge-Base-ZH/%E6%88%91%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%93%AA%E9%87%8C%E4%B8%8B%E8%BD%BD-TeamViewer-%E6%97%A7%E7%89%88%E6%9C%AC/ta-p/33695</a></p><h3 id="安装rpm文件"><a href="#安装rpm文件" class="headerlink" title="安装rpm文件"></a>安装rpm文件</h3><pre><code>1、rpm -ivh teamviewer-host_13.2.75536.x86_64.rpm      //需要自己安装依赖2、yum install teamviewer-host_13.2.75536.x86_64.rpm   //建议用此命令，会自动安装依赖</code></pre><h3 id="控制teamviewer服务"><a href="#控制teamviewer服务" class="headerlink" title="控制teamviewer服务"></a>控制teamviewer服务</h3><pre><code>systemctl [start|status|stop|disable|enable] teamviewerd</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code>//查看teamview信息$ teamviewer --info TeamViewer                           13.2.75536  (RPM) TeamViewer ID:                        1315674770 teamviewerd status                   ● teamviewerd.service - TeamViewer remote control daemon   Loaded: loaded (/etc/systemd/system/teamviewerd.service; enabled; vendor preset: disabled)   Active: active (running) since Thu 2019-06-27 05:11:13 EDT; 21min ago  Process: 5796 ExecStart=/opt/teamviewer/tv_bin/teamviewerd -d (code=exited, status=0/SUCCESS) Main PID: 5798 (teamviewerd)   Memory: 6.1M   CGroup: /system.slice/teamviewerd.service           └─5798 /opt/teamviewer/tv_bin/teamviewerd -dJun 27 05:11:13 localhost.localdomain systemd[1]: Starting TeamViewer remote control daemon...Jun 27 05:11:13 localhost.localdomain systemd[1]: PID file /var/run/teamviewerd.pid not readable (yet?) after start.Jun 27 05:11:13 localhost.localdomain systemd[1]: Started TeamViewer remote control daemon.// 设置密码$ teamviewer --passwd 123456ok</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> teamviewer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker-compose安装与使用</title>
      <link href="/2019/08/16/docker-compose%20%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"/>
      <url>/2019/08/16/docker-compose%20%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是docker-compose"><a href="#什么是docker-compose" class="headerlink" title="什么是docker-compose"></a>什么是docker-compose</h1><p>Compose是一个用于定义和运行多个Docker容器的编排工具。可以一条命令启动多个容器。主要是解决了容器与容器之间如何管理编排的问题。</p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><pre><code>sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose#添加可执行权限sudo chmod +x /usr/local/bin/docker-compose#验证docker-compose --version</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><pre><code>docker-compose -f asr-compose.yml up -ddocker-compose -f asr-compose.yml stopdocker-compose -f asr-compose.yml down... </code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pkg-config简介</title>
      <link href="/2019/08/12/pkg-config/"/>
      <url>/2019/08/12/pkg-config/</url>
      
        <content type="html"><![CDATA[<p>pkg-config 维护了一个保存各个代码库的路径的数据库。当然这个”数据库” 非常的简单，其实就是一个特殊的目录，这个目录中有一系列的以 “.pc” 为后缀的文件</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用来检索系统中安装库文件的信息,其主要功能如下：<br>   1、检查库的版本号。如果所需要的库的版本不满足要求，它会打印出错误信息<br>，避免链接错误版本的库文件。<br>   2、获得编译预处理参数，如宏定义，头文件的位置。<br>   3、获得链接参数，如库及依赖的其它库的位置，文件名及其它一些连接参数。<br>   4、自动加入所依赖的其它库的设置。</p><h3 id="使用条件提条件"><a href="#使用条件提条件" class="headerlink" title="使用条件提条件"></a>使用条件提条件</h3><p>1、库本身在安装的时候必须提供一个相应的.pc文件，如果没有.pc文件的软件则一般是不支持pkg-config工具的使用的。<br>2、pkg-config必须知道要到哪里去寻找此.pc文件</p><p>环境变量PKG_CONFIG_PATH是用来设置.pc文件的搜索路径的，pkg-config按照设置路径的先后顺序进行搜索，直到找到指定的.pc 文件为止</p><pre><code>$ locate zlib.pc  /usr/lib64/pkgconfig/zlib.pc$ export PKG_CONFIG_PATH=/usr/local/bin/pkg-config:$PKG_CONFIG_PATH</code></pre><h3 id="查看头文件位置"><a href="#查看头文件位置" class="headerlink" title="查看头文件位置"></a>查看头文件位置</h3><pre><code># 命令形式：pkg-config --cflags software_name# demo$ pkg-config --cflags opencv</code></pre><h3 id="查看lib库的位置"><a href="#查看lib库的位置" class="headerlink" title="查看lib库的位置"></a>查看lib库的位置</h3><pre><code># 命令形式：pkg-config --libs software_name# demo$ pkg-config --libs opencv</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pkg-config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim-plus安装经验谈</title>
      <link href="/2019/08/10/vim-plus%20%E5%AE%89%E8%A3%85%E7%BB%8F%E9%AA%8C/"/>
      <url>/2019/08/10/vim-plus%20%E5%AE%89%E8%A3%85%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-plus-安装"><a href="#vim-plus-安装" class="headerlink" title="vim plus 安装"></a>vim plus 安装</h1><p>vimPlus 的github 地址如下</p><pre><code>https://github.com/chxuan/vimplus</code></pre><p>可参考github 链接安装 vimplus。本人 linux 环境，主要进行如下操作</p><pre><code>git clone https://github.com/chxuan/vimplus.git ~/.vimpluscd ~/.vimplus./install.sh</code></pre><h1 id="解决ycmd报错"><a href="#解决ycmd报错" class="headerlink" title="解决ycmd报错"></a>解决ycmd报错</h1><blockquote><p>如果对解决过程不感兴趣，可以直接跳到最后一部分(总结部分)，进行安装</p></blockquote><p>当使用 vim xx.cpp 打开文件时，报错</p><pre><code>The ycmd server SHUT DOWN (restart with &#39;:YcmRestartServer&#39;). Unexpected exit code 1.</code></pre><p>百度查询后，得出结论 应该是 YouCompleteMe 没有安装成功。所以重新安装之<br>执行如下命令</p><pre><code>cd ~/.vim/plugged/YouCompleteMe./install.py</code></pre><p>执行 install.py 的时候，提醒执行 git submodule update –init –recursive命令。<br>那么按照要求执行 </p><pre><code>git submodule update --init --recursive</code></pre><p>问题又来了</p><pre><code>$ git submodule update --init --recursive正克隆到 &#39;third_party/go/src/golang.org/x/tools&#39;...fatal: unable to access &#39;https://go.googlesource.com/tools/&#39;: Failed connect to go.googlesource.com:443; Connection timed out无法克隆 &#39;https://go.googlesource.com/tools&#39; 到子模组路径 &#39;third_party/go/src/golang.org/x/tools&#39;无法递归进子模组路径 &#39;third_party/ycmd&#39;</code></pre><p>网络应该是被墙了，重点来了，解决办法就是先从git上clone下来然后拷贝到相应目录：</p><pre><code>git clone https://github.com/golang/tools.gitcp -r tools ~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x</code></pre><p>然后在 ~/.vim/plugged/YouCompleteMe 目录下执行一下</p><pre><code>git submodule update --init --recursive./install.py</code></pre><p>问题解决完成，可以放心使用了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综上，如果对问题的具体内容不care，可以直接参考如下安装步骤</p><pre><code>//安装vimplusgit clone https://github.com/chxuan/vimplus.git ~/.vimpluscd ~/.vimplus./install.sh// 重装YouCompleteMecd ~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/xgit clone https://github.com/golang/tools.gitcd ~/.vim/plugged/YouCompleteMegit submodule update --init --recursive./install.py</code></pre>]]></content>
      
      
      <categories>
          
          <category> C/CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos环境下安装libzip</title>
      <link href="/2019/08/10/centos%20%E5%AE%89%E8%A3%85libzip/"/>
      <url>/2019/08/10/centos%20%E5%AE%89%E8%A3%85libzip/</url>
      
        <content type="html"><![CDATA[<pre><code>#安装依赖工具yum install gccyum install zlib-develyum install make#下载并编译源码安装libzipwget https://nih.at/libzip/libzip-1.2.0.tar.gztar xzvf libzip-1.2.0.tar.gzcd libzip-1.2.0yum install zlib-devel./configuremakemake insatllldconfig# 设置环境变量 PATH  或者 LD_LIBRARY_PATH</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>printf、sprintf与fprintf 的用法区分</title>
      <link href="/2018/12/10/printf%E3%80%81sprintf%E4%B8%8Efprintf%20%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%86/"/>
      <url>/2018/12/10/printf%E3%80%81sprintf%E4%B8%8Efprintf%20%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="printf、sprintf与fprintf-的用法区分"><a href="#printf、sprintf与fprintf-的用法区分" class="headerlink" title="printf、sprintf与fprintf 的用法区分"></a>printf、sprintf与fprintf 的用法区分</h2><p>1.printf 是和标准输出文件(stdout)关联的,fprintf 则没有这个限制.</p><p>2.fprintf是用于文件操作的，fprintf是格式化输出到一个stream, 通常是到文件,原型是</p><pre><code>int fprintf( FILE *stream, const char *format [, argument ]...);</code></pre><p>3.sprintf是格式化输出到一个字符串,原型是：</p><pre><code>int   sprintf(char *buffer, const char *format  [,  argument]... ;</code></pre><blockquote></blockquote><p>printf输出到标准输出流(stdout)</p><p>fprintf转到文件句柄(FILE*)</p><p>sprintf转到分配的缓冲区。char*)</p>]]></content>
      
      
      <categories>
          
          <category> C/CPP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>goland 常用快捷键与激活</title>
      <link href="/2018/11/30/goland%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E6%BF%80%E6%B4%BB/"/>
      <url>/2018/11/30/goland%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="常用快捷键总结"><a href="#常用快捷键总结" class="headerlink" title="常用快捷键总结"></a>常用快捷键总结</h1><p>如下列表为 windows 系统上的常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能说明</th><th>备注</th></tr></thead><tbody><tr><td>ctrl + e</td><td>打开最近使用过的文件</td><td></td></tr><tr><td>ctrl + q</td><td>显示选中函数的声明以及注释内容</td><td></td></tr><tr><td>alt  + q</td><td>查看当前光标所在方法的名称</td><td></td></tr><tr><td>ctrl + x</td><td>删除当前光标所在行</td><td></td></tr><tr><td>ctrl + d</td><td>复制当前光标所在行</td><td></td></tr><tr><td>ctrl + f</td><td>文件内搜索</td><td></td></tr><tr><td>ctrl + g</td><td>快速定位到某行</td><td></td></tr><tr><td>ctrl + h</td><td>显示当前struct的层次结构</td><td></td></tr><tr><td>ctrl + i</td><td>选中struct后按下，选择要实现的interface</td><td></td></tr><tr><td>ctrl + F12</td><td>选中struct后按下，选择要实现的interface</td><td></td></tr><tr><td>ctrl + shift + i</td><td>显示函数内容</td><td></td></tr><tr><td>shift + ctrl + p</td><td>显示变量的数据类型</td><td></td></tr><tr><td>ctrl + w</td><td>智能选中</td><td></td></tr><tr><td>ctrl + b</td><td>快速打开光标处的结构体或方法（跳转到定义处）</td><td></td></tr><tr><td>ctrl + n</td><td>可以跳转到 输入的结构体</td><td></td></tr><tr><td>ctrl + shift + n</td><td>可以快速打开输入的文件</td><td></td></tr><tr><td>ctrl + j</td><td>调用 live templete，可快速输入代码块</td><td></td></tr><tr><td>ctrl + +/-</td><td>可以将当前方法进行展开或折叠</td><td></td></tr><tr><td>ctrl + alt + v</td><td>生成表达式返回值</td><td>表达式末尾使用。先不要写 “resp, err :=”，按下快捷键后会自动生成。</td></tr><tr><td>shift + ctrl + a</td><td>打开快速导航功能命令输入框</td><td></td></tr><tr><td>ctrl + shift + f</td><td>全局搜索</td><td></td></tr><tr><td>双击shift</td><td>打开智能搜索框：可搜索文件名、类名、包名和最近打开的文件</td></tr></tbody></table><blockquote><p>效果图请自行脑补，实践出真知</p></blockquote><p>个人感觉以上快捷键已足够使用,若需要了解更多的快捷键，请 按下 Ctrl + alt + s ，调出设置页面，找到 keymap ，然后查看 Editor actions</p><h1 id="golang-2-3-激活方法"><a href="#golang-2-3-激活方法" class="headerlink" title="golang 2.3 激活方法"></a>golang 2.3 激活方法</h1><ol><li>在host 文件中添加如下 配置<pre><code>0.0.0.0 account.jetbrains.com</code></pre></li><li>访问 <a href="http://idea.lanyus.com" target="_blank" rel="noopener">http://idea.lanyus.com</a><br>点击或者注册码，将生成的注册码 粘贴到 goland中去，ok搞定</li></ol><blockquote><p>参考链接： <a href="https://blog.csdn.net/ouzhuangzhuang/article/details/81518525" target="_blank" rel="noopener">https://blog.csdn.net/ouzhuangzhuang/article/details/81518525</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goland </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IM</title>
      <link href="/2016/11/28/IM/"/>
      <url>/2016/11/28/IM/</url>
      
        <content type="html"><![CDATA[<h2 id="WebRTC相关"><a href="#WebRTC相关" class="headerlink" title="WebRTC相关"></a>WebRTC相关</h2><ul><li>webrtc 源码分析<br><a href="http://blog.csdn.net/kenny_zh/article/category/2487849" target="_blank" rel="noopener">http://blog.csdn.net/kenny_zh/article/category/2487849</a></li></ul><p><a href="http://feixiao.github.io/2015/07/02/webrtc_2/" target="_blank" rel="noopener">http://feixiao.github.io/2015/07/02/webrtc_2/</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MAC环境安装protobuf简明教程</title>
      <link href="/2016/06/18/MAC%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85protobuf%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
      <url>/2016/06/18/MAC%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85protobuf%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>protobuf 是什么？ 请百度！<br>本文的主要目的是记录安装 protobuf 的历程，以备以后查阅，同时供大家参考，请多多指教！<br>废话不多说，直接上步骤：</p><h3 id="1-下载-protobuf-的源码："><a href="#1-下载-protobuf-的源码：" class="headerlink" title="1. 下载 protobuf 的源码："></a>1. 下载 protobuf 的源码：</h3><pre><code>git clone https://github.com/google/protobuf.git  </code></pre><h3 id="2-安装-必要的工具：automake-与-libtool："><a href="#2-安装-必要的工具：automake-与-libtool：" class="headerlink" title="2. 安装 必要的工具：automake 与 libtool："></a>2. 安装 必要的工具：automake 与 libtool：</h3><pre><code>$ brew install automake  $ brew install libtool  </code></pre><h3 id="3-进入源码目录，Run-autogen-sh"><a href="#3-进入源码目录，Run-autogen-sh" class="headerlink" title="3. 进入源码目录，Run autogen.sh"></a>3. 进入源码目录，Run autogen.sh</h3><pre><code>$ ./autogen.sh </code></pre><h3 id="4-安装-protobuf-："><a href="#4-安装-protobuf-：" class="headerlink" title="4. 安装 protobuf ："></a>4. 安装 protobuf ：</h3><pre><code>$ ./configure  // --prefix=your path(指定安装路径)(可选) $ make check  $ make  $ make install  </code></pre><blockquote><p>默认安装到 /usr/local 目录下，若要自定义安装路径，执行configure时，指定–prefix=/usr/local/protobuf即可。例：    </p><pre><code>$ ./configure --prefix=/usr/local/protobuf</code></pre></blockquote><h3 id="5-环境变量的配置"><a href="#5-环境变量的配置" class="headerlink" title="5. 环境变量的配置"></a>5. 环境变量的配置</h3><p>如果你采取的是默认的安装路径，则不用特意的设置环境变量，终端里 直接运行 protoc 即可找到该命令。如果你采用了自定义的安装路径，那么最好配置一下环境变量，将它的bin和lib目录分别加入到PATH和LD_LIBRARY_PATH环境变量，以方便直接调用。要不然每次都要进入安装目录里 执行 protoc 命令，岂不是费时费力。</p><p>如何配置环境变量，如下所示：<br>编辑 /etc/profile 文件，在文件末尾追加 </p><pre><code>export PATH=$PATH:/usr/local/protobuf/binexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/protobuf/lib</code></pre><p>其中，/usr/local/protobuf 是你的自定义安装目录</p><h3 id="注：安装过程中遇到的问题："><a href="#注：安装过程中遇到的问题：" class="headerlink" title="注：安装过程中遇到的问题："></a>注：安装过程中遇到的问题：</h3><ol><li>步骤三 Run autogen.sh 的时候，一定要有梯子，科学上网你懂得</li><li>步骤三 ./configure时，如果说没有权限，chmod +x configure</li><li><p>步骤四 make check 的时候 可能会报错 fatal error: ‘tr1/tuple’ file not found，运行如下命令解决 <a href="https://github.com/google/protobuf/issues/51" target="_blank" rel="noopener">解决办法</a>在这里，终端运行如下命令</p><pre><code>./configure CPPFLAGS=-DGTEST_USE_OWN_TR1_TUPLE=1 </code></pre></li><li><p>步骤五 配置环境变量的时候，/etc/profile 是一个只读文件，我是 找到 profile 文件，添加了写权限解决的。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac开启root用户</title>
      <link href="/2016/03/16/Mac%20%E5%BC%80%E5%90%AFroot%E7%94%A8%E6%88%B7/"/>
      <url>/2016/03/16/Mac%20%E5%BC%80%E5%90%AFroot%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<ol><li><p>从 Apple 菜单中选取系统偏好设置…。</p></li><li><p>从显示菜单中选取用户与群组。</p></li><li><p>点按锁图标并使用管理员帐户进行鉴定。</p></li><li><p>点按“登录选项…”。<br><img src="http://static.oschina.net/uploads/space/2015/0512/185731_tLZ4_218940.png" alt="在此输入图片描述"></p> <a id="more"></a></li><li>点按右下部的“编辑…”或“加入…”按钮。<br><img src="http://static.oschina.net/uploads/space/2015/0512/185813_aCYb_218940.png" alt="在此输入图片描述"></li><li>点按“打开目录实用工具…”按钮。<br><img src="http://static.oschina.net/uploads/space/2015/0512/185853_HYBT_218940.png" alt="在此输入图片描述"></li><li>点按“目录实用工具”窗口中的锁图标,输入管理员帐户名称和密码，然后点按“好”。<br><img src="http://static.oschina.net/uploads/space/2015/0512/185938_9nqs_218940.png" alt="在此输入图片描述"></li><li>从编辑菜单中选取启用 Root 用户。<br><img src="http://static.oschina.net/uploads/space/2015/0512/190403_naFo_218940.jpg" alt="在此输入图片描述"></li><li>在“密码”和“验证”字段中输入您想要使用的 root 密码，然后点按“好”。<br><img src="http://static.oschina.net/uploads/space/2015/0512/190423_yBSg_218940.png" alt="在此输入图片描述"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xcode键盘君的常用快捷键及设置</title>
      <link href="/2015/12/10/xcode%E9%94%AE%E7%9B%98%E5%90%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E8%AE%BE%E7%BD%AE/"/>
      <url>/2015/12/10/xcode%E9%94%AE%E7%9B%98%E5%90%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这是一篇神奇的文章，在这里你会了解常用快捷键，更会学会一些超便捷的装b技能.不用犹豫，保证学有所值！我将为你节省时间，为了你的诗和远方~</p><h3 id="一、常用快捷键"><a href="#一、常用快捷键" class="headerlink" title="一、常用快捷键"></a>一、常用快捷键</h3><p>快捷键大家谁都知道一些，也都在用：</p><pre><code>    1. 编译 app ：CMD + B     2. 运行程序 ：CMD + R     3. 清楚缓存 ：CMD + SHIFT + K     4. 在文件中查找 ： CMD + F     5. 全局搜索 ：CMD + SHIFT + F     6. 开启/关闭 断点调试 ：CMD + Y </code></pre><a id="more"></a><p>看到这里，你就可能觉得无聊，这些都是最常用不过的了，您别急，如果您对以上的这些快捷键都了然于胸，那么直接进入下一个章节吧。</p><h3 id="二、工作流快捷键"><a href="#二、工作流快捷键" class="headerlink" title="二、工作流快捷键"></a>二、工作流快捷键</h3><p>&emsp;大家使用快捷键的目地是啥，不就是为了提高工作效率么，顺便彰显一下我们牛逼的人生么，可是仅仅上面那些好像又显得很low，谁都会，那么如何优化自己的工作流，让自己与众不同呢？下面看看我是如何使用快捷键提升效率的吧，以下仅是抛砖引玉，希望能与大家多多互动交流。</p><pre><code>    1. CMD + SHIFT + O ：快速找到目标文件 (支持模糊搜索哦)    2. CMD + SHIFT + J ：快速定位，当前文件在xCode导航区的位置    3. Ctrl + 6 ：打开 .m 的方法列表，可以上下移动方向键，定位到目标method，然后回车，可以在调出方法列表的时候，输入目标函数的名字，也就是说 在这里的方法列表里是支持搜索的。不过 个人习惯，我已经在preference 中 把这个修改为 CMD + SHIFT + D。    4. 现在该编辑文件了，如果您用的 macbook，可能您觉得文件编辑区域有点小（一般在公司会外接显示器，这样这些快捷键可能就用处不打了），那么请敲 CMD + 0 ，隐藏左侧导航区（再次敲击 显示），敲 OPT + CMD + 0 ，隐藏 右侧工具区（再次敲击 显示），CMD + SHIFT + Y ，隐藏底部控制台（再次敲击 显示）     5.编辑文件时，您想 切换 .h 和 .m 文件 ，那么请 敲 CTRL + CMD + ↑ / ↓    6. CMD +  ↑ / ↓ : 快速回到文件 顶部/底部    7. OPT + CMD + ←/→ : 收起/展开 光标所在的方法代码块    8. OPT + CMD + [/] : 将光标所在代码行 上移/下移（与上一行代码交换/ 与下一行交换），    9. 快速删除一行代码： CMD + ← ，将光标移动到行头，CTRL + K 删除该行代码    10. 如果您正在编辑storyboard ，想往上拖控件的时候，请敲 CTRL + OPT + CMD + 3，快速进入右侧工具区底部的控件区域    </code></pre><p>如果您对vim有了解，并且习惯使用，那么建议您安装 xvim 插件，详情请百度or google如果这些您都掌握了。那么请藐视我吧，您就全当放松吧。</p><blockquote><p>PS.连个配图都没有，真是low，哈哈告诉您我是故意没有配图的，只有您亲自尝试过了，您才会记忆深刻，才会体会键盘君的工作流的“精髓”。（说白了，主要是我懒 ^_^）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
